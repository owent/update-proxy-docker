name: "Build On Linux"

on: # @see https://help.github.com/en/articles/events-that-trigger-workflows#webhook-events
  push:
    branches: # Array of patterns that match refs/heads
      - main
    tags:
      - "*"
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "46 2 * * 3"

jobs:
  build_vproxy: # job id, can be any string
    # Job name is Build And Publish
    name: Build vproxy
    # This job runs on Linux
    runs-on: ubuntu-latest
    env:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.21.0"
      - name: Build vproxy
        shell: bash
        run: |
          GITHUB_TOKEN="${{ secrets.PRIVATE_GITHUB_TOKEN }}"
          [ "x$GITHUB_TOKEN" = "x" ] || GITHUB_TOKEN_ARGS=("-H" 'Authorization: token $GITHUB_TOKEN')
          V2RAY_LATEST_VERSION=$(curl -L ${GITHUB_TOKEN_ARGS[@]} 'https://api.github.com/repos/v2fly/v2ray-core/releases?page=1&per_page=1' | grep tag_name | grep -E -o 'v[0-9]+[0-9\.]+' | head -n 1)
          git clone -b $V2RAY_LATEST_VERSION --depth 1 https://github.com/v2fly/v2ray-core.git v2ray-core
          cd v2ray-core
          sed -E -i.bak 's;(build[[:space:]]*=[[:space:]]*").*";\1Build by OWenT";' core.go
          go mod download
          mkdir -p build_assets
          go build -v -o build_assets/v2ray -trimpath -ldflags "-s -w -buildid=" ./main
          mkdir -p ../dist/bin ../dist/etc ../dist/share
          cp build_assets/v2ray ../dist/bin
          cp release/config/config.json ../dist/etc
          curl -k -qL "https://github.com/owent/update-geoip-geosite/releases/download/latest/geoip.dat" -o ../dist/bin/geoip.dat 
          curl -k -qL "https://github.com/owent/update-geoip-geosite/releases/download/latest/geosite.dat" -o ../dist/bin/geosite.dat
          curl -k -qL "https://raw.githubusercontent.com/v2fly/geoip/release/geoip-only-cn-private.dat" -o ../dist/bin/geoip-only-cn-private.dat
          curl -k -qL "https://github.com/owent/update-geoip-geosite/releases/download/latest/all.tar.gz" -o ../dist/share/geo-all.tar.gz

      - name: Build docker image
        shell: bash
        run: |
          which docker || true
          cd dist
          cp -f ../vproxy.Dockerfile ./
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "owt5008137" --password-stdin docker.io
          docker build --build-arg GITHUB_TOKEN=${{ secrets.PRIVATE_GITHUB_TOKEN }} --force-rm --tag docker.io/owt5008137/proxy-with-geo:latest -f vproxy.Dockerfile .
          docker push docker.io/owt5008137/proxy-with-geo:latest
  build_vbox: # job id, can be any string
    # Job name is Build And Publish
    name: Build vbox
    # This job runs on Linux
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: 0
    steps:
      - name: Checkout sing-box
        uses: actions/checkout@v4
      - name: Checkout geosite
        uses: actions/checkout@v4
        with:
          repository: "SagerNet/sing-geosite"
          path: "sing-geosite"
          ref: "rule-set"
      - name: Checkout geoip
        uses: actions/checkout@v4
        with:
          repository: "SagerNet/sing-geoip"
          path: "sing-geoip"
          ref: "rule-set"
      - name: Checkout Loyalsoldier-geoip
        uses: actions/checkout@v4
        with:
          repository: "Loyalsoldier/geoip"
          path: "Loyalsoldier-geoip"
          ref: "release"
      - name: Checkout DustinWin-geosite
        uses: actions/checkout@v4
        with:
          repository: "DustinWin/ruleset_geodata"
          path: "DustinWin-geosite"
          ref: "sing-box-ruleset"
      - name: Checkout lyc8503-geosite
        uses: actions/checkout@v4
        with:
          repository: "lyc8503/sing-box-rules"
          path: "lyc8503-geosite"
          ref: "rule-set-geosite"
      - name: Checkout lyc8503-geoip
        uses: actions/checkout@v4
        with:
          repository: "lyc8503/sing-box-rules"
          path: "lyc8503-geoip"
          ref: "rule-set-geoip"
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.21.0"
      - name: Build vproxy
        shell: bash
        run: |
          GITHUB_TOKEN="${{ secrets.PRIVATE_GITHUB_TOKEN }}"
          [ "x$GITHUB_TOKEN" = "x" ] || GITHUB_TOKEN_ARGS=("-H" 'Authorization: token $GITHUB_TOKEN')
          SING_BOX_LATEST_VERSION=$(curl -L ${GITHUB_TOKEN_ARGS[@]} 'https://api.github.com/repos/SagerNet/sing-box/releases/latest' | grep tag_name | grep -E -o 'v[0-9]+[0-9\.]+' | head -n 1)
          git clone -b $SING_BOX_LATEST_VERSION --depth 1 https://github.com/SagerNet/sing-box.git sing-box
          cd sing-box
          sed -E -i.bak 's;sing-box version;vbox version;g' cmd/sing-box/cmd_version.go
          sed -E -i.bak 's;version of sing-box;version of vbox;g' cmd/sing-box/cmd_version.go
      - name: Build docker image
        shell: bash
        run: |
          which docker || true
          [ "x$GITHUB_TOKEN" = "x" ] || GITHUB_TOKEN_ARGS=("-H" 'Authorization: token $GITHUB_TOKEN')
          SING_GEOIP_LATEST_VERSION=$(curl -L ${GITHUB_TOKEN_ARGS[@]} 'https://api.github.com/repos/SagerNet/sing-geoip/releases/latest' | grep tag_name | grep -E -o '[0-9]+[0-9\.]+' | head -n 1)
          SING_GEOSITE_LATEST_VERSION=$(curl -L ${GITHUB_TOKEN_ARGS[@]} 'https://api.github.com/repos/SagerNet/sing-geosite/releases/latest' | grep tag_name | grep -E -o '[0-9]+[0-9\.]+' | head -n 1)
          cd sing-box
          mkdir -p data/share/sing-geoip data/share/sing-geosite
          echo "======================== Copy files from sing-geoip ========================"
          cp -rfv ../sing-geoip/*.srs data/share/sing-geoip/
          echo "======================== Copy files from sing-geosite ========================"
          cp -rfv ../sing-geosite/*.srs data/share/sing-geosite/
          echo "======================== Copy files from DustinWin-geosite ========================"
          for srs_file in ../DustinWin-geosite/*.srs; do
            srs_file_name=$(basename "$srs_file")
            if [[ $srs_file_name =~ ip.srs$ ]]; then
              if [[ "${srs_file_name:0:8}" == "geoip-" ]]; then
                cp -rfv "$srs_file" "data/share/sing-geoip/${srs_file_name//ip.srs/.srs}"
              else
                cp -rfv "$srs_file" "data/share/sing-geoip/geoip-${srs_file_name//ip.srs/.srs}"
              fi
            else
              if [[ "${srs_file_name:0:8}" == "geosite-" ]]; then
                cp -rfv "$srs_file" "data/share/sing-geosite/$srs_file_name"
              else
                cp -rfv "$srs_file" "data/share/sing-geosite/geosite-$srs_file_name"
              fi
            fi
          done
          echo "======================== Copy files from Loyalsoldier-geoip ========================"
          for srs_file in ../Loyalsoldier-geoip/srs/*.srs; do
            srs_file_name=$(basename "$srs_file")
            if [[ "${srs_file_name:0:6}" == "geoip-" ]]; then
              cp -rfv "$srs_file" "data/share/sing-geoip/$srs_file_name"
            else
              cp -rfv "$srs_file" "data/share/sing-geoip/geoip-$srs_file_name"
            fi
          done
          echo "======================== Copy files from lyc8503-geoip ========================"
          cp -rfv ../lyc8503-geoip/*.srs data/share/sing-geoip/
          echo "======================== Copy files from lyc8503-geosite ========================"
          cp -rfv ../lyc8503-geosite/*.srs data/share/sing-geosite/
          echo "======================== Download geoip.db and geosite.db ========================"
          curl -k -L --retry 3 --retry-max-time 1800 https://github.com/lyc8503/sing-box-rules/releases/latest/download/geoip.db -o data/share/geoip.db || \
            curl -k -L --retry 3 --retry-max-time 1800 https://github.com/SagerNet/sing-geoip/releases/download/$SING_GEOIP_LATEST_VERSION/geoip.db -o data/share/geoip.db
          curl -k -L --retry 3 --retry-max-time 1800 https://github.com/lyc8503/sing-box-rules/releases/latest/download/geoip-cn.db -o data/share/geoip-cn.db || \
            curl -k -L --retry 3 --retry-max-time 1800 https://github.com/SagerNet/sing-geoip/releases/download/$SING_GEOIP_LATEST_VERSION/geoip-cn.db -o data/share/geoip-cn.db
          curl -k -L --retry 3 --retry-max-time 1800 https://github.com/lyc8503/sing-box-rules/releases/latest/download/geosite.db -o data/share/geosite.db || \
            curl -k -L --retry 3 --retry-max-time 1800 https://github.com/SagerNet/sing-geosite/releases/download/$SING_GEOSITE_LATEST_VERSION/geosite.db -o data/share/geosite.db
          curl -k -L --retry 3 --retry-max-time 1800 https://github.com/SagerNet/sing-geosite/releases/download/$SING_GEOSITE_LATEST_VERSION/geosite-cn.db -o data/share/geosite-cn.db
          # Patch srs from https://github.com/Loyalsoldier/geoip/tree/release/srs and https://github.com/Loyalsoldier/geosite/tree/release/srs
          cp -f ../vbox.Dockerfile ./
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "owt5008137" --password-stdin docker.io
          docker build --build-arg GITHUB_TOKEN=${{ secrets.PRIVATE_GITHUB_TOKEN }} --build-arg TARGETOS=linux --build-arg TARGETARCH=amd64 --force-rm --tag docker.io/owt5008137/vbox:latest -f vbox.Dockerfile .
          docker push docker.io/owt5008137/vbox:latest
          # Github package
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag docker.io/owt5008137/vbox:latest ghcr.io/${{ github.repository_owner }}/vbox:latest
          docker push ghcr.io/${{ github.repository_owner }}/vbox:latest
  build_smartdns: # job id, can be any string
    # Job name is Build And Publish
    name: Build smartdns
    # This job runs on Linux
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.21.0"
      - name: Build smartdns
        shell: bash
        run: |
          which docker || true;
          mkdir smartdns
          cd smartdns
          curl -k -L --retry 10 --retry-max-time 1800 -o smartdns.Dockerfile https://raw.githubusercontent.com/owent-utils/docker-setup/main/setup-router/smartdns/smartdns.Dockerfile
          curl -k -L --retry 10 --retry-max-time 1800 -o smartdns.origin.conf https://raw.githubusercontent.com/owent-utils/docker-setup/main/setup-router/smartdns/smartdns.origin.conf
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "owt5008137" --password-stdin docker.io
          docker build --build-arg GITHUB_TOKEN=${{ secrets.PRIVATE_GITHUB_TOKEN }} --force-rm --tag docker.io/owt5008137/smartdns:latest -f smartdns.Dockerfile .
          docker push docker.io/owt5008137/smartdns:latest
  build_coredns_release: # job id, can be any string
    # Job name is Build And Publish
    name: Build coredns (release)
    # This job runs on Linux
    runs-on: ubuntu-latest
    env:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      #- uses: actions/setup-go@v5
      #  with:
      #    go-version: ">=1.21.0"
      - name: Build coredns
        shell: bash
        run: |
          mkdir coredns
          cd coredns
          GITHUB_TOKEN="${{ secrets.PRIVATE_GITHUB_TOKEN }}"
          [ "x$GITHUB_TOKEN" = "x" ] || GITHUB_TOKEN_ARGS=("-H" 'Authorization: token $GITHUB_TOKEN')
          COREDNS_LATEST_VERSION=$(curl -L ${GITHUB_TOKEN_ARGS[@]} 'https://api.github.com/repos/coredns/coredns/releases/latest' | grep tag_name | grep -E -o 'v[0-9]+[0-9\.]+' | head -n 1)
          git clone -b $COREDNS_LATEST_VERSION --depth 1 https://github.com/coredns/coredns.git coredns
          cd coredns
          GITCOMMIT="$(git describe --dirty --always)"
          sed -i.bak -r '/alternate:.*/d' plugin.cfg
          sed -i.bak '/forward:.*/i alternate:github.com/coredns/alternate' plugin.cfg
          go get github.com/coredns/alternate
          sed -i.bak -r '/finalize:.*/d' plugin.cfg
          sed -i.bak '/cache:.*/a finalize:github.com/tmeckel/coredns-finalizer' plugin.cfg
          go get github.com/tmeckel/coredns-finalizer
          sed -i.bak -r '/filter:.*/d' plugin.cfg
          sed -i.bak '/cache:.*/a filter:github.com/owent/coredns-filter' plugin.cfg
          go get github.com/owent/coredns-filter@main
          sed -i.bak -r '/nftables:.*/d' plugin.cfg
          sed -i.bak '/cache:.*/i nftables:github.com/owent/coredns-nftables' plugin.cfg
          go get github.com/owent/coredns-nftables@main
          go generate
          # Just like it in make -f Makefile.release build LINUX_ARCH=amd64
          # CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build  -ldflags="-s -w -X github.com/coredns/coredns/coremain.GitCommit=$GITCOMMIT" -o build/linux/amd64/coredns
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build  -ldflags="-s -w -X github.com/coredns/coredns/coremain.GitCommit=$GITCOMMIT -extldflags -static" -o build/linux/amd64/coredns
          which docker || true;
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "owt5008137" --password-stdin docker.io
          cd build/linux/amd64
          sed -i.bak 's;FROM[[:space:]]+scratch;FROM debian:stable-slim;g' ../../../Dockerfile
          sed -i.bak 's;FROM[[:space:]]*--platform=$TARGETPLATFORM[[:space:]]*scratch;FROM debian:stable-slim;g' ../../../Dockerfile
          sed -i.bak 's;FROM[[:space:]]*--platform=$BUILDPLATFORM[[:space:]]*debian:stable-slim;FROM debian:stable-slim;g' ../../../Dockerfile
          sed -i.bak 's;[[:space:]]*USER[[:space:]]*nonroot.*;USER root:root;g' ../../../Dockerfile
          docker build --force-rm --tag docker.io/owt5008137/coredns:latest -f ../../../Dockerfile .
          docker push docker.io/owt5008137/coredns:latest
          # Github package
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag docker.io/owt5008137/coredns:latest ghcr.io/${{ github.repository_owner }}/coredns:latest
          docker push ghcr.io/${{ github.repository_owner }}/coredns:latest
  build_coredns_debug: # job id, can be any string
    # Job name is Build And Publish
    name: Build coredns (debug)
    # This job runs on Linux
    runs-on: ubuntu-latest
    env:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      #- uses: actions/setup-go@v5
      #  with:
      #    go-version: ">=1.21.0"
      - name: Build coredns
        shell: bash
        run: |
          mkdir coredns
          cd coredns
          GITHUB_TOKEN="${{ secrets.PRIVATE_GITHUB_TOKEN }}"
          [ "x$GITHUB_TOKEN" = "x" ] || GITHUB_TOKEN_ARGS=("-H" 'Authorization: token $GITHUB_TOKEN')
          COREDNS_LATEST_VERSION=$(curl -L ${GITHUB_TOKEN_ARGS[@]} 'https://api.github.com/repos/coredns/coredns/releases/latest' | grep tag_name | grep -E -o 'v[0-9]+[0-9\.]+' | head -n 1)
          git clone -b $COREDNS_LATEST_VERSION --depth 1 https://github.com/coredns/coredns.git coredns
          cd coredns
          GITCOMMIT="$(git describe --dirty --always)"
          sed -i.bak -r '/alternate:.*/d' plugin.cfg
          sed -i.bak '/forward:.*/i alternate:github.com/coredns/alternate' plugin.cfg
          go get github.com/coredns/alternate
          sed -i.bak -r '/finalize:.*/d' plugin.cfg
          sed -i.bak '/cache:.*/a finalize:github.com/tmeckel/coredns-finalizer' plugin.cfg
          go get github.com/tmeckel/coredns-finalizer
          sed -i.bak -r '/filter:.*/d' plugin.cfg
          sed -i.bak '/cache:.*/a filter:github.com/owent/coredns-filter' plugin.cfg
          go get github.com/owent/coredns-filter@main
          sed -i.bak -r '/nftables:.*/d' plugin.cfg
          sed -i.bak '/cache:.*/i nftables:github.com/owent/coredns-nftables' plugin.cfg
          go get github.com/owent/coredns-nftables@main
          go generate
          # Just like it in make -f Makefile.release build LINUX_ARCH=amd64
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -gcflags=all="-N -l" -ldflags="-w -X github.com/coredns/coredns/coremain.GitCommit=$GITCOMMIT" -o build/linux/amd64/coredns
          # CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build  -ldflags="-s -w -X github.com/coredns/coredns/coremain.GitCommit=$GITCOMMIT -extldflags -static" -o build/linux/amd64/coredns
          which docker || true;
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "owt5008137" --password-stdin docker.io
          cd build/linux/amd64
          sed -i.bak 's;FROM[[:space:]]+scratch;FROM debian:stable;g' ../../../Dockerfile
          sed -i.bak 's;debian:stable-slim;debian:stable;g' ../../../Dockerfile
          sed -i.bak 's;FROM[[:space:]]*--platform=$TARGETPLATFORM[[:space:]]*scratch;FROM debian:stable;g' ../../../Dockerfile
          sed -i.bak 's;FROM[[:space:]]*--platform=$BUILDPLATFORM[[:space:]]*debian:stable;FROM debian:stable;g' ../../../Dockerfile
          sed -i.bak 's;[[:space:]]*USER[[:space:]]*nonroot.*;USER root:root;g' ../../../Dockerfile
          docker build --force-rm --tag docker.io/owt5008137/coredns:debug -f ../../../Dockerfile .
          docker push docker.io/owt5008137/coredns:debug
          # Github package
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag docker.io/owt5008137/coredns:debug ghcr.io/${{ github.repository_owner }}/coredns:debug
          docker push ghcr.io/${{ github.repository_owner }}/coredns:debug
